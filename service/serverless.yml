service: service

provider:
  name: aws
  runtime: python3.7
  environment:
    bucket_name: 'html-response-body'
    table_name: 'html-response-title'
  iamRoleStatements:
    - Effect: Allow
      Action:
        lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.table_name}"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::${self:provider.environment.bucket_name}/*"

functions:
  parse_title:
    handler: handler.parse_title
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - dynamoTitleTable
              - StreamArn
          batchSize: 1
  async_parse_title:
      handler: handler.async_parse_title
  get_processed_title:
      handler: handler.get_processed_title

resources:
  Resources:
    dynamoTitleTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.table_name}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    HTMLResponseBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.bucket_name}


plugins:
  - serverless-python-requirements
